<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rootjang&#39;s IT Blog</title>
  
  <subtitle>Geunho&#39;s IT Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rootjang92.github.io/"/>
  <updated>2018-09-05T01:50:52.000Z</updated>
  <id>http://rootjang92.github.io/</id>
  
  <author>
    <name>Geun ho</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>이미지와 하이퍼텍스트링크</title>
    <link href="http://rootjang92.github.io/2018/09/05/htmlimage/"/>
    <id>http://rootjang92.github.io/2018/09/05/htmlimage/</id>
    <published>2018-09-05T01:37:02.000Z</published>
    <updated>2018-09-05T01:50:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="이미지와-하이퍼텍스트-링크"><a href="#이미지와-하이퍼텍스트-링크" class="headerlink" title="이미지와 하이퍼텍스트 링크"></a>이미지와 하이퍼텍스트 링크</h1><h2 id="웹에서-사용되는-이미지-파일-형식은"><a href="#웹에서-사용되는-이미지-파일-형식은" class="headerlink" title="웹에서 사용되는 이미지 파일 형식은?"></a>웹에서 사용되는 이미지 파일 형식은?</h2><p>웹 페이지는 기본적으로 설명은 텍스트, 메뉴나 로고 등은 이미지로 처리 한다. 웹 페이지의 경우 크기가 작고 화질이 좋은 파일 형식을 사용하여야 하는데 웹에서 사용할 수 있는 파일 형식은 GIF, JPG/JPEG, PNG 파일이 있다.</p><a href="https://ko.wikipedia.org/wiki/%EC%9D%B4%EB%AF%B8%EC%A7%80_%ED%8C%8C%EC%9D%BC_%ED%98%95%EC%8B%9D" target="_blank" rel="noopener">이미지 파일 형식</a><h2 id="img-태그"><a href="#img-태그" class="headerlink" title="img 태그"></a>img 태그</h2><p>HTML에서 이미지를 삽입하는 태그는 <img> 태그이다. 이 때 src 속성을 사용하여 해당 이미지의 주소를 넣는다.</p><p><img src="/Users/mac/Desktop/예제폴더/images/image.png" alt="이미지삽입하기"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;이미지와-하이퍼텍스트-링크&quot;&gt;&lt;a href=&quot;#이미지와-하이퍼텍스트-링크&quot; class=&quot;headerlink&quot; title=&quot;이미지와 하이퍼텍스트 링크&quot;&gt;&lt;/a&gt;이미지와 하이퍼텍스트 링크&lt;/h1&gt;&lt;h2 id=&quot;웹에서-사용되는-이미지-파일-형
      
    
    </summary>
    
      <category term="HTML &amp; CSS" scheme="http://rootjang92.github.io/categories/HTML-CSS/"/>
    
      <category term="HTML" scheme="http://rootjang92.github.io/categories/HTML-CSS/HTML/"/>
    
    
      <category term="HTML, html, HTML basic syntax, HTML hyperlink, html link" scheme="http://rootjang92.github.io/tags/HTML-html-HTML-basic-syntax-HTML-hyperlink-html-link/"/>
    
  </entry>
  
  <entry>
    <title>Object</title>
    <link href="http://rootjang92.github.io/2018/09/04/jsobject/"/>
    <id>http://rootjang92.github.io/2018/09/04/jsobject/</id>
    <published>2018-09-04T01:38:52.000Z</published>
    <updated>2018-09-05T01:36:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="객체-프로퍼티와-참조-그리고-프로토타입"><a href="#객체-프로퍼티와-참조-그리고-프로토타입" class="headerlink" title="객체 프로퍼티와 참조 그리고 프로토타입"></a>객체 프로퍼티와 참조 그리고 프로토타입</h1><h2 id="객체-프로퍼티-읽기와-쓰기-그리고-갱신"><a href="#객체-프로퍼티-읽기와-쓰기-그리고-갱신" class="headerlink" title="객체 프로퍼티 읽기와 쓰기 그리고 갱신"></a>객체 프로퍼티 읽기와 쓰기 그리고 갱신</h2><p>우선 프로퍼티에 접근하는 방법을 알아야 하는데 그 방법에는 대괄호 표기법과 마침표 표기법 두가지가 있다.</p><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><pre><code>var foo = {  name : &apos;Jang&apos;,  major : &apos;Computer science&apos;};// 객체 프로퍼티 읽기console.log(foo.name);console.log(foo[&apos;name&apos;]);console.log(foo.nickname);foo.major = &apos;electronics Business&apos;;console.log(foo.major);console.log(foo[&apos;major&apos;]);foo.age = 27;console.log(foo.age);foo[&apos;full-name&apos;] = &apos;Jang Geun-ho&apos;;console.log(foo[&apos;full-name&apos;]);console.log(foo.full);</code></pre><p>출력 결과</p><blockquote><p>Jang<br>Jang<br>undefined<br>electronics Business<br>electronics Business<br>27<br>Jang Geun-ho<br>undefined</p></blockquote><p>마침표 표기법은 객체 다음에 마침표를 찍고 원하는 속성값을 적으면 된다. 대괄호 표기법은 객체의 프로퍼티를 문자열 형태로 만들어 대괄호 안에 넣으면 된다. 만약 문자화하지 않으면 값은 undefined가 나타난다.</p><p>또한 대괊호 표기법을 이용하여 기존 프로퍼티값을 갱신할 수 있다. 예제에서 살펴봤던 foo[‘major’]의 형태처럼 말이다.<br>JS의 특징 중 하나가 프로퍼티의 동적 생성인데 보시다시피 foo.age라는 프로퍼티는 아직 존재하지 않지만 이걸 동적으로 생성하여 27이라는 숫자값을 할당해준다.</p><p><strong>즉 기존에 있는 값은 갱신되고 없는 프로퍼터의 경우 동적 생성된 후 값이 할당된다는 의미이다.</strong></p><p>주의할 점은 연산자가 포함되있는 경우라면 <strong>대괄호 표기법</strong>을 사용하여야 한다는 것이다.<br>또한 객체 프로퍼티는 delete 연산자를 이용해 삭제할 수 있다. 단 delete 연산자는 프로퍼티만 삭제한다.</p><h3 id="예제2"><a href="#예제2" class="headerlink" title="예제2"></a>예제2</h3><pre><code>var foo = {  name : &apos;Jang&apos;,  major : &apos;Computer science&apos;};var prop;for (prop in foo) {  console.log(prop, foo[prop]);}</code></pre><p>출력결과</p><blockquote><p>name Jang<br>major Computer science</p></blockquote><p>for in 문을 이용해서 foo라는 개체에 루프를 돌렸다. prop 변수에 foo 객체의 프로퍼티가 하나씩 할당되면서 대괄호 표기법을 사용해 모든 요소가 출력된다.</p><h2 id="참조-타입의-특성"><a href="#참조-타입의-특성" class="headerlink" title="참조 타입의 특성"></a>참조 타입의 특성</h2><p>객체는 JS에서 참조 타입이라고 부른다. 객체의 연산은 참조값으로 처리가 되기 때문이다.</p><pre><code>var A = {  val : 40};var B = Aconsole.log(A.val);console.log(B.val);B.val = 50;console.log(A.val);console.log(B.val);</code></pre><p>A, B두 객체를 객체 리터럴 방식으로 생성해 보았다. 이 때 각 콘솔 로그의 값은 어떻게 찍힐까?</p><p>출력 결과</p><blockquote><p>40<br>40<br>50<br>50</p></blockquote><p>변수 A와 B는 동일한 객체를 가리키는 참조값을 가지기 때문에 B의 val 값을 50으로 변경하면 변수 A의 값도 변한다.<br>즉 <strong>A는 실제로 객체를 참조하는 값을 저장하는 것이지 실제 객체를 나타내지는 않는다</strong>는 점이다.<br><strong>A 객체는 참조 변수 A가 가리키는 객체!</strong></p><h2 id="객체-비교"><a href="#객체-비교" class="headerlink" title="객체 비교"></a>객체 비교</h2><p>JS에서의 동등 연산자(==)는 객체의 프로퍼티 값이 아니라 참조값을 비교한다.</p><pre><code>var a = 100;var b = 100;var objA = { value: 100 };var objB = { value: 100 };var objC = objBconsole.log(a == b);console.log(objA == objB);console.log(objB == objC);</code></pre><p>출력 결과를 예상해보자. 당연히 모두 true를 예상했겠지만(처음에는 저도…) 답은…</p><p>출력결과</p><blockquote><p>true<br>false<br>true</p></blockquote><p>변수 objA와 objB는 다른 참조값을 가진다. a,b처럼 기본 타입의 경우는 단순히 값을 비교하지만 객체의 경우 참조값을 비교하기 때문에 각각 다른 값을 참조하고 있는 두 변수는 동등 연산자를 사용했을 때 <strong>false</strong>가 나오는 것이다.</p><h2 id="함수-호출-방식"><a href="#함수-호출-방식" class="headerlink" title="함수 호출 방식."></a>함수 호출 방식.</h2><p>기본 타입과 참조 타입은 함수 호출 방식이 다르다.</p><ul><li><p>기본타입<br>call by value(값에 의한 호출) : 기본 타입의 값을 인자로 넘길 경우 호출된 함수의 매개변수로 <strong>복사된 값</strong>이 전달된다.<br>그렇기 때문에 함수 내 매개변수로 값을 변경해도 실제로 변수의 값은 변하지 않는다.</p></li><li><p>참조타입<br>call by reference(참조에 의한 호출) : 함수 호출 시 인자로 넘긴 객체의 참조값이 그대로 함수로 전달된다. 그렇기 때문에 함수 내부에서 참조값을 변경하면 실제 객체의 값도 변경된다.</p></li></ul><pre><code>var a = 100;var objA = { value: 100 };function changeArg(num, obj) {  num = 200;  obj.value = 200;  console.log(num);  console.log(obj);}changeArg(a, objA);console.log(a);console.log(objA);</code></pre><p>출력 결과</p><blockquote><p>200<br>{ value: 200 }<br>100<br>{ value: 200 }</p></blockquote><p>함수를 호출하면서 기본 타입인 변수 a의 값은 변화하지 않았지만, 객체 타입인 objA의 값은 변화하였다.</p><p><img src="https://poiemaweb.com/img/call-by-val&amp;ref.png" alt="value refer"></p><a href="https://poiemaweb.com/js-function" target="_blank" rel="noopener">참고자료</a><p>다음 시간에는 프로토타입과 배열에 대해 살펴보겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;객체-프로퍼티와-참조-그리고-프로토타입&quot;&gt;&lt;a href=&quot;#객체-프로퍼티와-참조-그리고-프로토타입&quot; class=&quot;headerlink&quot; title=&quot;객체 프로퍼티와 참조 그리고 프로토타입&quot;&gt;&lt;/a&gt;객체 프로퍼티와 참조 그리고 프로토타입&lt;/
      
    
    </summary>
    
      <category term="Javascript" scheme="http://rootjang92.github.io/categories/Javascript/"/>
    
      <category term="ES5" scheme="http://rootjang92.github.io/categories/Javascript/ES5/"/>
    
    
      <category term="Javascript, js, es5, ES5, object, js object" scheme="http://rootjang92.github.io/tags/Javascript-js-es5-ES5-object-js-object/"/>
    
  </entry>
  
  <entry>
    <title>목록을 생성하는 HTML 태그</title>
    <link href="http://rootjang92.github.io/2018/09/04/htmllist/"/>
    <id>http://rootjang92.github.io/2018/09/04/htmllist/</id>
    <published>2018-09-04T01:12:31.000Z</published>
    <updated>2018-09-04T08:14:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="목록을-생성하는-태그"><a href="#목록을-생성하는-태그" class="headerlink" title="목록을 생성하는 태그"></a>목록을 생성하는 태그</h1><p>HTML 문서를 작성할 때 많이 쓰이는 태그 중 하나가 바로 목록을 생성하는 태그다. 웹 표준이 정의화된 후에는 이미지나 텍스트에 구애받지 않고 어떤 것이든 목록화 시킬 수 있다. 특히 CSS를 적용한다면 메뉴나 본문 내용 등으로 사용할 수 있으니 table 태그가 거의 안쓰이는 이유가 되기도 했다.</p><h2 id="ul태그-li태그"><a href="#ul태그-li태그" class="headerlink" title="ul태그, li태그"></a>ul태그, li태그</h2><p>이 두 태그는 ‘순서 없는’ 목록을 만들 때 사용되는 태그이다. ul태그 안에 li태그를 사용하여 목록화 시킨다.</p><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><iframe width="100%" height="300" src="//jsfiddle.net/rootjang/ctfadnky/embedded/html,result/" allowfullscreen="allowfullscreen" allowpaymentrequest="" frameborder="0"></iframe><h2 id="ol태그-li태그"><a href="#ol태그-li태그" class="headerlink" title="ol태그, li태그"></a>ol태그, li태그</h2><p>ol 태그는 순서가 필요한 목록을 만들 때 사용한다. ol은 타입을 지정할 수 있는데 1은 숫자를 나타내며 기본값으로 설정되어 있다.<br>그 외에 a(영소문자),A(영대문자),i(로마숫자 소문자),I(로마숫자 대문자)로 이루어져 있다. CSS로도 대체 가능하다.</p><h3 id="에제"><a href="#에제" class="headerlink" title="에제"></a>에제</h3><iframe width="100%" height="300" src="//jsfiddle.net/rootjang/0y4vn2fj/1/embedded/html,result/" allowfullscreen="allowfullscreen" allowpaymentrequest="" frameborder="0"></iframe><h2 id="dl-dt-dd-태그"><a href="#dl-dt-dd-태그" class="headerlink" title="dl,dt,dd 태그"></a>dl,dt,dd 태그</h2><p>자주 쓰이는 태그는 아니지만 설명 목록을 만들 때 주로 쓰이는 태그이다. 경험이 적어서 그런건진 몰라도 이 태그 쓰는 사이트를 본 기억이 드물다. 위키트리에서는 쓰일 수도 있겠다… 여튼 dl태그로 묶고 dt 태그에 제목을 dd 태그에 설명을 표시한다.</p><p>지금까지 배운 자료를 가지고 본인만의 간단한 프로필 웹 페이지를 만들어 보는 것도 좋을 것 같다.</p><h3 id="참고할-만한-사이트"><a href="#참고할-만한-사이트" class="headerlink" title="참고할 만한 사이트."></a>참고할 만한 사이트.</h3><p><a href="https://validator.w3.org/" target="_blank" rel="noopener">HTML 온라인 검사기</a></p><p>이 사이트는 파일을 업로드하면 자동으로 HTML 문서 상 오류가 있는 지 검사해주는 사이트다. 웹 페이지를 제작할 때 꽤 유용하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;목록을-생성하는-태그&quot;&gt;&lt;a href=&quot;#목록을-생성하는-태그&quot; class=&quot;headerlink&quot; title=&quot;목록을 생성하는 태그&quot;&gt;&lt;/a&gt;목록을 생성하는 태그&lt;/h1&gt;&lt;p&gt;HTML 문서를 작성할 때 많이 쓰이는 태그 중 하나가 바로 
      
    
    </summary>
    
      <category term="HTML &amp; CSS" scheme="http://rootjang92.github.io/categories/HTML-CSS/"/>
    
      <category term="HTML" scheme="http://rootjang92.github.io/categories/HTML-CSS/HTML/"/>
    
    
      <category term="HTML, html, HTML basic syntax, htmltag, ul, li" scheme="http://rootjang92.github.io/tags/HTML-html-HTML-basic-syntax-htmltag-ul-li/"/>
    
  </entry>
  
  <entry>
    <title>자바스크립트 데이터 타입과 연산자.</title>
    <link href="http://rootjang92.github.io/2018/09/03/jsdatatype/"/>
    <id>http://rootjang92.github.io/2018/09/03/jsdatatype/</id>
    <published>2018-09-03T09:04:58.000Z</published>
    <updated>2018-09-04T08:05:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="자바스크립트-데이터-타입"><a href="#자바스크립트-데이터-타입" class="headerlink" title="자바스크립트 데이터 타입"></a>자바스크립트 데이터 타입</h3><p>자바스크립트의 데이터 타입에는 기본 타입과 참조 타입이 있다. 기본타입은 숫자, 문자열, boolean, undefined, null 값이 있고<br>참조형에는 객체(배열, 함수, 정규 표현식)이 있다.</p><h2 id="자바스크립트-기본-타입"><a href="#자바스크립트-기본-타입" class="headerlink" title="자바스크립트 기본 타입"></a>자바스크립트 기본 타입</h2><p>기본 타입에는 Nmber, String, Boolean, null, undefined가 있다.<br>이들 타입의 특징은 <strong>그 자체가 하나의 값</strong>을 나타낸다는 것이다. 자바스크립트는 느슨한 타입의 언어이기 때문에 변수를 선언할 때 타입을 미리 지정하지 않고 var(es5)라는 키워드로 변수를 선언하여 어떠한 값이라도 데이터를 저장할 수 있다.</p><pre><code>var intNum = 10;var floatNum = 0.1;var singleQuoteStr = &apos;single quote string&apos;;var boolVar = true;var emptyVar;var nullVar = null;console.log(typeof intNum, typeof floatNum, typeof singleQuoteStr, typeof boolVar,        typeof emptyVar, typeof nullVar);</code></pre><p>출력 결과</p><blockquote><p>number number string boolean undefined object</p></blockquote><h2 id="숫자"><a href="#숫자" class="headerlink" title="숫자"></a>숫자</h2><p>다른 언어와 달리 JS에서는 하나의 숫자형만 존재한다. (모든 숫자를 64비트 부동 소수점 형태로 저장한다.)<br>또한 모든 숫자를 실수로 처리하므로 나눗셈 연산에 주의하여야 한다.</p><pre><code>var num = 5 / 2;console.log(num);console.log(Math.floor(num));</code></pre><p>출력 결과</p><blockquote><p>2.5<br>2</p></blockquote><p>Math.floor 메서드는 정수 부분만 구하는 JS의 메서드이다.</p><h2 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h2><p>문자열은 작은 따옴표나 큰 따옴표를 이용해서 생성한다. 또한 JS의 문자열은 문자 배열처럼 인덱스를 이용할 수 있다. 또한 한 번 생선된 문자열은 수정이 불가능 하다.</p><pre><code>var str = &apos;easy&apos;;console.log(str[0], str[1], str[2], str[3]);str[0] = &apos;E&apos;;console.log(str);</code></pre><p>출력 결과</p><blockquote><p>e a s y<br>easy</p></blockquote><h2 id="boolean값"><a href="#boolean값" class="headerlink" title="boolean값"></a>boolean값</h2><p>JS에서 사용하는 true, false 값이다.</p><h2 id="null과-undefined"><a href="#null과-undefined" class="headerlink" title="null과 undefined"></a>null과 undefined</h2><p>두 타입 모두 ‘값이 비어 있다.’를 나타내기 위해 사용된다. <strong>값이 할당되지 않은</strong> 변수는 undefined이며 이는 변수 자체의 값이 undefined이다. (타입이자 값이다.) 여기 주의할 점은 null의 타입이 object라는 것인데 이 때문에 타입 변수인자를 확인할 때에는 일치 연산자를 사용하여야 한다. (===)</p><pre><code>var nullVar = null;console.log(typeof nullVar === null);console.log(nullVar === null);</code></pre><p>출력 결과</p><blockquote><p>false<br>true</p></blockquote><h2 id="JS-객체-타입"><a href="#JS-객체-타입" class="headerlink" title="JS 객체 타입"></a>JS 객체 타입</h2><p>JS에서 기본 타입을 제외한 모든 것은 객체이다. 배열, 함수, 정규표현식 들도 마찬가지이다. 객체는 단순히 이름(key):값(value)를 저장하는 형태이다. 기본 타입은 하나의 값마늘 가지는 데에 반해 겍체는 여러 개의 프로퍼티를 포함할 수 있다. 그래서 기본 타입을 포함하거나 다른 객체를 가리킬 수도 있다. 또한 프로퍼티의 성질에 따라 함수로 포함시킬 수도 있으며 이러한 프로퍼티를 <strong>메서드</strong>라고 부른다.</p><h2 id="JS-객체-생성-방법"><a href="#JS-객체-생성-방법" class="headerlink" title="JS 객체 생성 방법."></a>JS 객체 생성 방법.</h2><p>객체 생성 방법에는 3가지가 있다. 그 방법들에 대해 알아보자</p><h3 id="Object-생성자-함수"><a href="#Object-생성자-함수" class="headerlink" title="Object() 생성자 함수."></a>Object() 생성자 함수.</h3><p>JS에서는 객체를 생성할 때 내장 Object() 생성자 함수를 제공한다. 예제를 통해 살펴보자.</p><pre><code>var foo = new Object();// foo property make upfoo.name = &apos;Jang&apos;;foo.age = 27;foo.gender = &apos;male&apos;;console.log(typeof foo);console.log(foo);</code></pre><p>출력 결과</p><blockquote><p>object<br>{ name: ‘Jang’, age: 27, gender: ‘male’ }</p></blockquote><p>Object() 생성자 함수를 통해 객체를 생성하였고 그 타입은 object이고 변수 foo에 3가지 프로퍼티가 추가되었음을 알 수 있다.</p><h3 id="객체-리터럴-방식"><a href="#객체-리터럴-방식" class="headerlink" title="객체 리터럴 방식."></a>객체 리터럴 방식.</h3><p>리터럴이란 표기법을 의미한다. 즉 간단한 표기법으로 객체를 생성하는 방식이다.</p><pre><code>var foo = {  name : &apos;Jang&apos;,  age : 27,  gender : &apos;male&apos;};console.log(typeof foo);console.log(foo);</code></pre><p>출력 결과</p><blockquote><p>object<br>{ name: ‘Jang’, age: 27, gender: ‘male’ }</p></blockquote><h3 id="생성자-함수-이용"><a href="#생성자-함수-이용" class="headerlink" title="생성자 함수 이용."></a>생성자 함수 이용.</h3><p>객체를 함수를 통해서도 생성할 수 있다. 생성자 함수라고 하는데 다음에 더 자세히 다루도록 하겠다.</p><p>다음 시간에는 객체 프로퍼티 표기법과 참조타입의 특성에 대해 살펴보겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;자바스크립트-데이터-타입&quot;&gt;&lt;a href=&quot;#자바스크립트-데이터-타입&quot; class=&quot;headerlink&quot; title=&quot;자바스크립트 데이터 타입&quot;&gt;&lt;/a&gt;자바스크립트 데이터 타입&lt;/h3&gt;&lt;p&gt;자바스크립트의 데이터 타입에는 기본 타입과 참조
      
    
    </summary>
    
      <category term="Javascript" scheme="http://rootjang92.github.io/categories/Javascript/"/>
    
      <category term="ES5" scheme="http://rootjang92.github.io/categories/Javascript/ES5/"/>
    
    
      <category term="Javascript, js, es5, ES5, data, datatype" scheme="http://rootjang92.github.io/tags/Javascript-js-es5-ES5-data-datatype/"/>
    
  </entry>
  
  <entry>
    <title>HTML 텍스트 관련된 태그들</title>
    <link href="http://rootjang92.github.io/2018/09/03/htmltext/"/>
    <id>http://rootjang92.github.io/2018/09/03/htmltext/</id>
    <published>2018-09-03T08:02:35.000Z</published>
    <updated>2018-09-04T08:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML-텍스트-관련-태그들"><a href="#HTML-텍스트-관련-태그들" class="headerlink" title="HTML 텍스트 관련 태그들."></a>HTML 텍스트 관련 태그들.</h3><p>HTML 문서를 작성할 때 가장 많이 쓰이는 태그는 무엇일까?? 바로 텍스트 관련 태그들이다.<br>p, strong, table,em,ul,li 태그 등 꽤 많은 태그가 쓰이는 데 그 중에서 정말 자주 쓰이는 태그만 알아보자.araboza</p><h2 id="h-관련-태그"><a href="#h-관련-태그" class="headerlink" title="h 관련 태그"></a>h 관련 태그</h2><p>HTML 문서에서 제목을 붙이고 싶을 때는 h관련 태그(제목 텍스트)를 쓰면 된다. h 태그를 사용하면 글씨가 크고 굵어진다.<br>h1 ~ h6까지 사용 가능하다.</p><iframe width="100%" height="300" src="//jsfiddle.net/rootjang/7dao64g5/10/embedded/html,result/" allowfullscreen="allowfullscreen" allowpaymentrequest="" frameborder="0"></iframe><h2 id="p-태그"><a href="#p-태그" class="headerlink" title="p 태그"></a>p 태그</h2><p>쉽게 말하면 단락 만들기 태그이다. 단락은 앞뒤에 줄바꿈이 있는 덩어리를 말한다.</p><h2 id="br-태그"><a href="#br-태그" class="headerlink" title="br 태그"></a>br 태그</h2><p>줄바꿈 태그이다. 이 태그 없이 줄바꿈을 하더라도 줄이 바뀌지 않는다. (텍스트만 사용 시)</p><h2 id="hr-태그"><a href="#hr-태그" class="headerlink" title="hr 태그"></a>hr 태그</h2><p>수평줄을 삽입하는 태그이다. 보통 css로 만들기 때문에 딱히 쓰이진 않지만… 실습용으로</p><h2 id="blockquote-태그"><a href="#blockquote-태그" class="headerlink" title="blockquote 태그"></a>blockquote 태그</h2><p>다른 사이트에서 가져온 글을 인용할 때 사용하는 태그이다. (마크다운에도 비슷한 문법이 있다.)</p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><iframe width="100%" height="300" src="//jsfiddle.net/rootjang/rpg6cemf/1/embedded/html,result/" allowfullscreen="allowfullscreen" allowpaymentrequest="" frameborder="0"></iframe><h2 id="pre-태그"><a href="#pre-태그" class="headerlink" title="pre 태그"></a>pre 태그</h2><p>입력한 그대로 입력되게 해주는 태그다. 하지만 웹 표준성에 맞추기 위해 사용을 자제하는 것이 좋다.</p><h2 id="strong-b태그와-em-i-태그"><a href="#strong-b태그와-em-i-태그" class="headerlink" title="strong, b태그와 em, i 태그"></a>strong, b태그와 em, i 태그</h2><p>strong, b 태그는 텍스트를 굵게 표시하기 위해 사용된다. 둘의 차이점은 단순히 굵게 표시할떈 b태그, 강조되었다는 것을 알리기 위해선 strong 태그를 사용한다.</p><p>em, i 태그는 이탤릭체로 표시되게 하는 태그이다. 둘의 차이는 단순히 표시만 하는 것은 em, 의미를 알리기 위해선 i 태그르 사용한다는 것이다.</p><h2 id="blockquote와-q-태그"><a href="#blockquote와-q-태그" class="headerlink" title="blockquote와 q 태그"></a>blockquote와 q 태그</h2><p>두 태그 모두 인용문을 사용하는 태그이지만 둘의 차이는 블록 베레이냐 인라인 레벨이냐 이다.<br>blocakquote는 블록 레벨에 태그이기 때문에 인용 내용이 줄이 바뀌어 나타나지만, q태그는 인라인 태그이기 때문에 한 줄로 표시된다.</p><h2 id="span-태그"><a href="#span-태그" class="headerlink" title="span 태그"></a>span 태그</h2><p>줄 바꿈 없이 단락 안에서 텍스트를 묶을 때 사용하는 태그이다. 큰 의미는 없다.</p><p>다음 시간에는 목록만들기와 테이블 만들기를 알아보도록 하겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HTML-텍스트-관련-태그들&quot;&gt;&lt;a href=&quot;#HTML-텍스트-관련-태그들&quot; class=&quot;headerlink&quot; title=&quot;HTML 텍스트 관련 태그들.&quot;&gt;&lt;/a&gt;HTML 텍스트 관련 태그들.&lt;/h3&gt;&lt;p&gt;HTML 문서를 작성할 때 가
      
    
    </summary>
    
      <category term="HTML &amp; CSS" scheme="http://rootjang92.github.io/categories/HTML-CSS/"/>
    
      <category term="HTML" scheme="http://rootjang92.github.io/categories/HTML-CSS/HTML/"/>
    
    
      <category term="HTML, html, HTML basic syntax, htmltag" scheme="http://rootjang92.github.io/tags/HTML-html-HTML-basic-syntax-htmltag/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 기본 개요</title>
    <link href="http://rootjang92.github.io/2018/09/02/jsbasic/"/>
    <id>http://rootjang92.github.io/2018/09/02/jsbasic/</id>
    <published>2018-09-02T01:46:18.000Z</published>
    <updated>2018-09-02T02:01:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="자바스크립트-기본-개요"><a href="#자바스크립트-기본-개요" class="headerlink" title="자바스크립트 기본 개요"></a>자바스크립트 기본 개요</h3><p>자바스크립트는 웹 브라우저에서 동작하는 스크립트 언어이다. 처음에는 웹 페이지 제작에 <strong>보조적</strong> 역할에 한정되어 있었다.<br>하지만 여러가지 연구와 prototype 라이브러리 개발 등 많은 발전이 있으면서 서버에서 담당하던 역할이 웹 브라우저로 옮겨졌고 결국 자바스크립트는 그 변화의 중심적인 언어가 되었다. (인사이드 자바스크립트 저:송형주, 고현준 참조)</p><p>현재 github에서 가장 많이 사용되고 있는 언어는 자바스크립트이고 Node.js의 개발로 서버 개발 또한 가능해지며 사용자가 늘고 있다.</p><p>자바스크립트는 현재 웹 개발은 물론 Node.js, express, socket.io 등을 활용한 서버 개발, 애플리케이션 개발도 가능해졌기 때문에 웹 기반 플랫폼에선 없어서는 안될 언어가 되었다.</p><h3 id="자바스크립트-핵심-개념"><a href="#자바스크립트-핵심-개념" class="headerlink" title="자바스크립트 핵심 개념"></a>자바스크립트 핵심 개념</h3><p>자바스크립트에서는 꼭 알아야 할 몇가지 핵심 개념이 있는데 앞으로 블로그를 운영하면서 차차 살펴보도록 하겠다.</p><ul><li>객체(Object)</li></ul><p>자바스크립트(이하 JS)의 거의 모든 것은 객체라고 할 정도로 중요한 개념이다. 자바스크립트의 기본 데이터 타입을 제외하곤 모든 것이 객체이다.<br>하지만 null과 undefined를 제외한 모든 것을 객체처럼 다룰 수 있기 때문에 이 2가지를 제외하곤 모두 객체라고 할 수 있다.</p><ul><li>함수</li></ul><p>JS에선 함수도 객체이다. 함수는 특히 중요하기 떄문에 일급 객체(First class object)로 취급된다.</p><ul><li>프로토타입</li></ul><p>모든 객체는 프로토타입을 가진다. 분량이 상당히 많을 것으로 예상되기 때문에 뒤에서 자세히 다루겠지만, 쉽게 말해서 해당 개체를 생성한 생성자를 가리킨다고 보면 된다. 이 프로토타입으로 인해 겍체지향에 상속을 구현할 수 있게 되었다.</p><ul><li>실행 컨텍스트와 클로저</li></ul><p>JS는 자신만의 방법으로 실행 컨텍스트를 만들고 그 안에서 유효범위(Scope)를 갖는다. 또한 그 과정에서 클로저를 구현할 수 있다.</p><ul><li>객체지향 프로그래밍</li></ul><p>JS는 클래스를 지원하지 않지만(ES6에서는 함수의 형태로 만들어졌다.) 상속과 캡슐화 등의 객체지향 프로그래밍을 따라가고 있다.</p><ul><li>JS와 함수형 프로그래밍</li></ul><p>‘모듈화’하면 함수형 프로그래밍! JS의 일급 객체인 함수와 클로저를 활용하여 함수형 프로그래밍이 가능하게 한다.</p><ul><li>단점</li></ul><p>굉장히 유연한 언어의 단점은 디버깅이 힘들다는 점, 느슨한 타입 체크로 인한 컴파일 에러(런타임 에러로 이어진다.)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;자바스크립트-기본-개요&quot;&gt;&lt;a href=&quot;#자바스크립트-기본-개요&quot; class=&quot;headerlink&quot; title=&quot;자바스크립트 기본 개요&quot;&gt;&lt;/a&gt;자바스크립트 기본 개요&lt;/h3&gt;&lt;p&gt;자바스크립트는 웹 브라우저에서 동작하는 스크립트 언어이
      
    
    </summary>
    
      <category term="Javascript" scheme="http://rootjang92.github.io/categories/Javascript/"/>
    
      <category term="ES5" scheme="http://rootjang92.github.io/categories/Javascript/ES5/"/>
    
    
      <category term="Javascript, js, es5, ES5" scheme="http://rootjang92.github.io/tags/Javascript-js-es5-ES5/"/>
    
  </entry>
  
  <entry>
    <title>HTML 기본 문서 구조</title>
    <link href="http://rootjang92.github.io/2018/09/02/htmlbasic/"/>
    <id>http://rootjang92.github.io/2018/09/02/htmlbasic/</id>
    <published>2018-09-02T01:03:39.000Z</published>
    <updated>2018-09-02T01:44:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML-기본-문서-구조"><a href="#HTML-기본-문서-구조" class="headerlink" title="HTML 기본 문서 구조"></a>HTML 기본 문서 구조</h3><h1 id="1-태그"><a href="#1-태그" class="headerlink" title="1. 태그"></a>1. 태그</h1><p>HTML은 웹 문서에 마크업을 하는 언어이다. 그 때 마크업을 사용하는 약속된 표기법이 <strong>태그</strong> 이다.</p><ul><li><p>태그는 <code>&lt;&gt;</code>를 사용한다.<br>꺽쇠 사이에 들어가는 부분이 바로 tag 부분이다.</p></li><li><p>소문자로 쓴다.(권장사항)<br>대,소문자를 구분하진 않지만 HTML5 표준 명세에는 소문자를 권장하고 있다.</p></li><li><p>여는 태그와 닫는 태그<br>닫는 태그가 없는 경우도 있지만 닫는 태그가 필요한 태그에는 반드시 태그를 닫아주어야 한다.</p></li><li><p>들여쓰기.<br>쉽게 눈으로 확인하고 문서의 구조를 파악하기가 쉬워진다. tab키를 사용한다.</p></li><li><p>속성을 파악해야 한다.<br>태그 안에는 사용할 수 있는 속성값이 있다. 예를 들어 img 태그에는 src(주소값), width, height 등의 속성이 있다.</p></li></ul><h2 id="처음-만들어-보는-HTML-문서"><a href="#처음-만들어-보는-HTML-문서" class="headerlink" title="처음 만들어 보는 HTML 문서"></a>처음 만들어 보는 HTML 문서</h2><iframe width="100%" height="300" src="//jsfiddle.net/rootjang/7dao64g5/6/embedded/html,result/" allowfullscreen="allowfullscreen" allowpaymentrequest="" frameborder="0"></iframe><h2 id="문서-구조-살펴보기"><a href="#문서-구조-살펴보기" class="headerlink" title="문서 구조 살펴보기."></a>문서 구조 살펴보기.</h2><pre><code>&lt;!DOCTYPE html&gt;</code></pre><p>HTML5로 작성된 웹 문서라는 뜻이다. HTML4에서는 엄격모드, 호환 모드 등 꽤 복잡했지만 이젠 단 한줄이면 된다.</p><pre><code>&lt;html&gt; ~ &lt;/html&gt;</code></pre><p>웹 문서의 시작과 끝이라고 보면 된다. 이 태그에는 lang이라는 속성에 언어를 설정해 줘야 하는데 특정 언어로 검색할 때 그 대상이 될 수 있다.</p><pre><code>&lt;head&gt; ~ &lt;/head&gt;</code></pre><p>웹 문서를 해석하기 위해 필요한 정보들을 입력하는 곳이다.</p><pre><code>&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;&lt;title&gt;내가 처음 만드는 HTML 문서&lt;/title&gt;</code></pre><p>head 태그 안에는 meta태그와 title태그가 보통 표시 되는데 화면에 보이는 것은 title 태그이다. meta 태그는 실제 문서 내용이 아닌 문서를 해석하기 위해 사용되는 태그이다.</p><p>title태그에 문서 제목을 입력하는 이유는 웹 표준성과 관련되어 있다. 간혹 시각 장애를 가지고 계시는 분들이 인터넷을 이용할 때 보조 기기를 이용하는데, 제목을 듣고 이 사이트가 어떤 사이트 인지 알 수 있어야 하기 떄문이다.</p><p>meta 태그 안에는 문자 인코딩 방법이나 키워드 등을 지정한다.</p><pre><code>&lt;body&gt; ~ &lt;/body&gt;</code></pre><p>웹 문서의 실질적인 내용(화면에 나오는 내용)이 나타내는 태그이다. 대부분의 태그는 이 <body>태그 안에 들어간다.</body></p><p>사이트를 이용하기 위해선 서버단에서 호스팅 서버를 준비해서 FTP 프로그램을 이용해 배포해야 한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HTML-기본-문서-구조&quot;&gt;&lt;a href=&quot;#HTML-기본-문서-구조&quot; class=&quot;headerlink&quot; title=&quot;HTML 기본 문서 구조&quot;&gt;&lt;/a&gt;HTML 기본 문서 구조&lt;/h3&gt;&lt;h1 id=&quot;1-태그&quot;&gt;&lt;a href=&quot;#1-태그&quot;
      
    
    </summary>
    
      <category term="HTML &amp; CSS" scheme="http://rootjang92.github.io/categories/HTML-CSS/"/>
    
      <category term="HTML" scheme="http://rootjang92.github.io/categories/HTML-CSS/HTML/"/>
    
    
      <category term="HTML, html, HTML basic syntax, html tag" scheme="http://rootjang92.github.io/tags/HTML-html-HTML-basic-syntax-html-tag/"/>
    
  </entry>
  
  <entry>
    <title>HTML이란?</title>
    <link href="http://rootjang92.github.io/2018/09/01/html1/"/>
    <id>http://rootjang92.github.io/2018/09/01/html1/</id>
    <published>2018-09-01T06:27:45.000Z</published>
    <updated>2018-09-01T07:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML이란-무엇인가"><a href="#HTML이란-무엇인가" class="headerlink" title="HTML이란 무엇인가?"></a>HTML이란 무엇인가?</h3><p>우리가 흔히 보는 웹사이트의 기본은 HTML 이다. 흔히 ‘웹 문서’를 작성한다고 말하는데 이를 보는 프로그램이 바로 ‘Web browser’이다.<br>HTML은 HyperText Markup Language의 줄임말로서 하이퍼텍스트를 마크업한는 언어다.</p><h1 id="하이퍼-텍스트란"><a href="#하이퍼-텍스트란" class="headerlink" title="하이퍼 텍스트란?"></a>하이퍼 텍스트란?</h1><blockquote><p>웹 사이트에서 링크를 클릭해 다른 문서나 사이트로 즉시 이동할 수 있는 기능.</p></blockquote><p><code>&lt;&gt;</code>로 묶인 것은 HTML 태그라고 하고 이렇게 태그를 붙이는 것이 마크업이다. 이 꺽쇠안의 내용은 웹 브라우저 화면에 나타나지 않는다.</p><p>네이버로 들어가 [페이지 소스 보기], 혹은 검사(chrome)을 하여 documents를 살펴보자.<br><a href="https://www.naver.com" target="_blank" rel="noopener">HTML소스 엿보기</a></p><h1 id="웹-표준이란"><a href="#웹-표준이란" class="headerlink" title="웹 표준이란?"></a>웹 표준이란?</h1><p>우리가 현재 사용하고 있는 HTML5를 웹 표준 기술이라고 하는데 왜 웹 표준이 필요할까?<br>바로 ‘표준’이 필요하기 떄문입니다. 세상에는 많은 브라우저들이 있기 때문에 예를 들어 IE에서는 맞지 않고 크롬에만 맞는 사이트를 구현한다면 사용자들이 자유롭게 이용할 수 없다.</p><p>따라서 HTML5로 문서를 만드는 것은 웹 표준을 지키는 문서를 만드는 것이다.</p><ol><li>최신 웹 표준에 맞는 웹사이트를 제작할 수 있다.</li><li>앱 화면의 기초를 디자인한다.</li><li>Interactive한 사이트를 만들 수 있다.</li><li>소스를 이해하여 웹 사이트나 블로그를 쉽게 수정할 수 있다.</li></ol><p>이로서 HTML5를 왜 사용하는 지에 대해 알아보았습니다. 다음 시간에는 HTML의 기본 문서 구조에 대해 알아보겠습니다.</p><ul><li>이 글은 DO it! HTML5 + CSS3 웹 표준의 정석이라는 책을 인용하였습니다.</li><li>thumbnail 출처 : <a href="http://knulab.com/archives/1060" target="_blank" rel="noopener">http://knulab.com/archives/1060</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HTML이란-무엇인가&quot;&gt;&lt;a href=&quot;#HTML이란-무엇인가&quot; class=&quot;headerlink&quot; title=&quot;HTML이란 무엇인가?&quot;&gt;&lt;/a&gt;HTML이란 무엇인가?&lt;/h3&gt;&lt;p&gt;우리가 흔히 보는 웹사이트의 기본은 HTML 이다. 흔히 
      
    
    </summary>
    
      <category term="HTML &amp; CSS" scheme="http://rootjang92.github.io/categories/HTML-CSS/"/>
    
      <category term="HTML" scheme="http://rootjang92.github.io/categories/HTML-CSS/HTML/"/>
    
    
      <category term="HTML, html" scheme="http://rootjang92.github.io/tags/HTML-html/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://rootjang92.github.io/2018/08/30/hello-world/"/>
    <id>http://rootjang92.github.io/2018/08/30/hello-world/</id>
    <published>2018-08-30T06:10:05.000Z</published>
    <updated>2018-08-30T06:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
